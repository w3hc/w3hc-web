// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rURT7PSYpAQNuaCGHJDPZg
// Component: JRM9PBGrBO

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 8weNktnDWmJHK/component
import Footer from "../../Footer"; // plasmic-import: VnNBHcpuRiqHc/component

import { useScreenVariants as useScreenVariantshCgzN1EtzMdy } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: hCGZ-N1etzMDY/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_w_3_hc_web.module.css"; // plasmic-import: rURT7PSYpAQNuaCGHJDPZg/projectcss
import sty from "./PlasmicAbout.module.css"; // plasmic-import: JRM9PBGrBO/css

export type PlasmicAbout__VariantMembers = {};
export type PlasmicAbout__VariantsArgs = {};
type VariantPropType = keyof PlasmicAbout__VariantsArgs;
export const PlasmicAbout__VariantProps = new Array<VariantPropType>();

export type PlasmicAbout__ArgsType = {};
type ArgPropType = keyof PlasmicAbout__ArgsType;
export const PlasmicAbout__ArgProps = new Array<ArgPropType>();

export type PlasmicAbout__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  ul?: p.Flex<"ul">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultAboutProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAbout__RenderFunc(props: {
  variants: PlasmicAbout__VariantsArgs;
  args: PlasmicAbout__ArgsType;
  overrides: PlasmicAbout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshCgzN1EtzMdy()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicAbout.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAbout.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAbout.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicAbout.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicAbout.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicAbout.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicAbout.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicAbout.pageMetadata.ogImageSrc}
        />
        <link ref="canonical" href={PlasmicAbout.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__erUv)}>
            <div className={classNames(projectcss.all, sty.freeBox__nhiNm)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mZxNo
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "The Web3 Hackers Collective is a DAO created on February 24, 2023. It is deployed to Optimism Mainnet. We're using "
                      }
                    </React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__ktot2
                        )}
                        component={Link}
                        href={"https://github.com/w3hc/gov" as const}
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Gov"
                          : "Gov"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>
                      {
                        " which is an implementation of Open Zeppelin's Governor contract in combination with NFTs. \n\nOur mission statement is:\n\n "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        '"We want to build integrations through mentoring and learning."'
                      }
                    </span>
                    <React.Fragment>
                      {
                        "\n\nAny proposal should meet one of the following criteria:\n\n"
                      }
                    </React.Fragment>
                    {
                      <ul
                        data-plasmic-name={"ul"}
                        data-plasmic-override={overrides.ul}
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li___0Qg81
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Organize local hackathons, workshops and meetups"
                            : "Organize local hackathons, workshops and meetups"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__kdlJb
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Request retroactive funding for a successful integration"
                            : "Request retroactive funding for a successful integration"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__oJVc1
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Develop and maintain Gov: a DAO framework built with Governor and NFTs"
                            : "Develop and maintain Gov: a DAO framework built with Governor and NFTs"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__cZrr
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Help people to setup their own DAO"
                            : "Help people to setup their own DAO"}
                        </li>
                      </ul>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "The Web3 Hackers Collective is a DAO created on February 24, 2023. It is deployed to Optimism Mainnet. We're using "
                      }
                    </React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__ktot2
                        )}
                        component={Link}
                        href={"https://github.com/w3hc/gov" as const}
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Gov"
                          : "Gov"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>
                      {
                        " which is an implementation of Open Zeppelin's Governor contract in combination with NFTs. \n\nOur mission statement is:\n\n"
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        '"We want to build integrations through mentoring and learning."'
                      }
                    </span>
                    <React.Fragment>
                      {
                        "\n\nAny proposal should meet one of the following criteria:\n\n"
                      }
                    </React.Fragment>
                    {
                      <ul
                        data-plasmic-name={"ul"}
                        data-plasmic-override={overrides.ul}
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li___0Qg81
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Organize local hackathons, workshops and meetups"
                            : "Organize local hackathons, workshops and meetups"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__kdlJb
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Request retroactive funding for a successful integration"
                            : "Request retroactive funding for a successful integration"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__oJVc1
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Develop and maintain Gov: a DAO framework built with Governor and NFTs"
                            : "Develop and maintain Gov: a DAO framework built with Governor and NFTs"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__cZrr
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Help people to setup their own DAO"
                            : "Help people to setup their own DAO"}
                        </li>
                      </ul>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                )}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ezOuj
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__c4ZfR
                      )}
                      component={Link}
                      href={
                        "https://www.tally.xyz/gov/web3-hackers-collective" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"View the DAO on Tally"}
                    </p.PlasmicLink>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__stMv0
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__jIlQk
                      )}
                      component={Link}
                      href={
                        "https://github.com/orgs/w3hc/projects/8/views/6" as const
                      }
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Contribute on Gov"}
                    </p.PlasmicLink>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sUuoN
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__ses4C
                      )}
                      component={Link}
                      href={"https://forms.gle/MYAfygPm5GD95HQ19" as const}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Join the WH3C"}
                    </p.PlasmicLink>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__p9CVj
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__p3Dtw
                      )}
                      component={Link}
                      href={"https://discord.gg/bHKJV3NWUQ" as const}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      {"Come say hi on Discord"}
                    </p.PlasmicLink>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "ul", "footer"],
  header: ["header"],
  ul: ["ul"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  ul: "ul";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAbout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAbout__VariantsArgs;
    args?: PlasmicAbout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAbout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAbout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAbout__ArgProps,
          internalVariantPropNames: PlasmicAbout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAbout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAbout";
  } else {
    func.displayName = `PlasmicAbout.${nodeName}`;
  }
  return func;
}

export const PlasmicAbout = Object.assign(
  // Top-level PlasmicAbout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    ul: makeNodeComponent("ul"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicAbout
    internalVariantProps: PlasmicAbout__VariantProps,
    internalArgProps: PlasmicAbout__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "W3HC - About",
      description:
        "We want to build integrations through mentoring and learning.",
      ogImageSrc:
        "https://site-assets.plasmic.app/16913ee9842ff1d4b5c32ddeb18c5be8.png",
      canonical: "https://w3hc.org/about"
    }
  }
);

export default PlasmicAbout;
/* prettier-ignore-end */
