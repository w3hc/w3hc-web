// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rURT7PSYpAQNuaCGHJDPZg
// Component: qzW6Oyh00Gft

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: 8weNktnDWmJHK/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Footer from "../../Footer"; // plasmic-import: VnNBHcpuRiqHc/component

import { useScreenVariants as useScreenVariantshCgzN1EtzMdy } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: hCGZ-N1etzMDY/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_w_3_hc_web.module.css"; // plasmic-import: rURT7PSYpAQNuaCGHJDPZg/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: qzW6Oyh00Gft/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  freeBox?: Flex__<"div">;
  section?: Flex__<"section">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshCgzN1EtzMdy()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <link ref="canonical" href={PlasmicHomepage.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Stack__
              as={"section"}
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              hasGap={true}
              className={classNames(projectcss.all, sty.section)}
            >
              <Reveal
                big={false}
                className={classNames("__wab_instance", sty.reveal__lnjAt)}
                direction={"down"}
                duration={3000}
                effect={"fade"}
                triggerOnce={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xbAvQ
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Web3 \nHackers \nCollective"
                    : "Web3 Hackers Collective"}
                </div>
              </Reveal>
              <Reveal
                big={true}
                cascade={false}
                className={classNames("__wab_instance", sty.reveal___8Hfe2)}
                delay={3000}
                duration={3000}
                effect={"fade"}
                triggerOnce={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aBgRi
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <React.Fragment>{"We want to build "}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__pm9Xk
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "integrations"
                            : "integrations"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>{" \nthrough"}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__rqc7B
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? " mentoring"
                            : " mentoring"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>{" \nand \n"}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__n57Xe
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "education"
                            : "education"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>{"."}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__sIxqc
                          )}
                          component={Link}
                          href={`/`}
                          platform={"nextjs"}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ""
                            : " mentoring"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link___3BnPg
                          )}
                          component={Link}
                          href={`/`}
                          platform={"nextjs"}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ""
                            : "education"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <React.Fragment>{"We want to build "}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__rhqii
                          )}
                          component={Link}
                          href={`/`}
                          platform={"nextjs"}
                        >
                          {"integrations"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>{" through\n"}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__sIxqc
                          )}
                          component={Link}
                          href={`/`}
                          platform={"nextjs"}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ""
                            : " mentoring"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>{" and "}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link___3BnPg
                          )}
                          component={Link}
                          href={`/`}
                          platform={"nextjs"}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ""
                            : "education"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>{"."}</React.Fragment>
                    </React.Fragment>
                  )}
                </div>
              </Reveal>
            </Stack__>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "freeBox", "section", "footer"],
  header: ["header"],
  freeBox: ["freeBox", "section"],
  section: ["section"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  freeBox: "div";
  section: "section";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    freeBox: makeNodeComponent("freeBox"),
    section: makeNodeComponent("section"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Web3 Hackers Collective",
      description:
        "We want to build integrations through mentoring and learning.",
      ogImageSrc:
        "https://site-assets.plasmic.app/16913ee9842ff1d4b5c32ddeb18c5be8.png",
      canonical: "https://w3hc.org"
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
